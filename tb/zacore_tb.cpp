/* verilator.cpp
 * By: John Jekel
 *
 * Verilator testbench for vgacpu
 *
 * Based on the one from JZJCoreF
 *
*/

/* Includes */

#include <cstdint>
#include "verilated.h"

//The header that will be generated by verilator
#include "Vzacore_tb.h"

/* Variables */

static uint64_t simulation_time = 0;//Used to keep track of simulation time for dumping a wave file

/* Function Declarations */

double sc_time_stamp();//Used by Verilator to keep track of simulation time dumping a wave file

/* Function Implementations */

int main(int argc, char** argv) {
    //Initialization for verilator
    Verilated::commandArgs(argc, argv);//Interpret command line arguments for Verilator
    Vzacore_tb* testbench = new Vzacore_tb;//Instantiate the zacore_tb module for simulation
    Verilated::traceEverOn(true);//Needed to support dumping

    //Simulation
    testbench->eval();//Update simulation
    ++simulation_time;//Increment time counter

    //Reset all registers
    testbench->i_rst = 1;
    testbench->eval();//Update simulation
    ++simulation_time;//Increment time counter
    testbench->i_clk = 1;//Set clock high
    testbench->eval();//Update simulation
    ++simulation_time;//Increment time counter
    testbench->i_clk = 0;//Set clock low
    testbench->eval();//Update simulation
    ++simulation_time;//Increment time counter
    testbench->i_rst = 0;
    testbench->eval();//Update simulation
    ++simulation_time;//Increment time counter

    //Toggle the clock repeadetly
    while (!Verilated::gotFinish()) {//Run simulation until $finish() is called in SystemVerilog
        testbench->i_clk = 1;//Set clock high
        testbench->eval();//Update simulation
        ++simulation_time;//Increment time counter

        testbench->i_clk = 0;//Set clock low
        testbench->eval();//Update simulation
        ++simulation_time;//Increment time counter
    }

    //Cleanup and exit
    delete testbench;
    return 0;
}

double sc_time_stamp() {//Callback used by Verilator for dumping (it expects this symbol)
    return (double)(simulation_time);
}
